package io.openleap.mrs.config;

import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.security.OAuthFlow;
import io.swagger.v3.oas.annotations.security.OAuthFlows;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.security.SecurityScheme;
import io.swagger.v3.oas.annotations.servers.Server;
@OpenAPIDefinition(
        security = {
                @SecurityRequirement(name = "UniApiKeycloakOauth2"),
                @SecurityRequirement(name = "LocalKeycloakOauth2")
        },
        servers = {
                @Server(
                        url = "https://uniapitest.datapart-factoring.de/gw",
                        description = "Uni Api Test Server"
                ),
                @Server(
                        url = "http://localhost:8080",
                        description = "Localhost Test Server with logger profile"
                ),
                @Server(
                        url = "http://localhost:8086/gw",
                        description = "Localhost Test Server with gateway"
                )},
        info = @Info(
                title = "Message Receiver Service API",
                version = "1.0",
                description = "API documentation generated by SpringDoc"
        )
)

@SecurityScheme(
        name = "UniApiKeycloakOauth2",
        type = SecuritySchemeType.OAUTH2,
        flows = @OAuthFlows(
                clientCredentials = @OAuthFlow(
                        tokenUrl = "https://idptest.datapart-factoring.de/realms/master/protocol/openid-connect/token",
                        scopes = {
                                @io.swagger.v3.oas.annotations.security.OAuthScope(name = "mrs_send", description = "Message Receiver Service Send Scope")
                        }
                )
        )
)
@SecurityScheme(
        name = "LocalKeycloakOauth2",
        type = SecuritySchemeType.OAUTH2,
        flows = @OAuthFlows(
                clientCredentials = @OAuthFlow(
                        tokenUrl = "http://keycloak-web:8090/realms/openleap-realm/protocol/openid-connect/token",
                        scopes = {
                                @io.swagger.v3.oas.annotations.security.OAuthScope(name = "mrs_send", description = "Message Receiver Service Send Scope")
                        }
                )
        )
)

public class OpenApiConfig {


}
